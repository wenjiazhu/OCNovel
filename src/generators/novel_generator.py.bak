    @retry(stop=stop_after_attempt(3), wait=wait_fixed(10))
    def generate_chapter(self, chapter_idx: int, extra_prompt: str = "", original_content: str = "", prev_content: str = "", next_content: str = "") -> str:
        """生成章节内容"""
        outline = self.chapter_outlines[chapter_idx]
        
        logging.info(f"开始生成第 {chapter_idx + 1} 章内容")
        
        # 创建一个空的参考材料结构，避免使用知识库
        reference_materials = {
            "plot_references": [],
            "character_references": [],
            "setting_references": []
        }
        
        logging.info(f"第 {chapter_idx + 1} 章: 参考材料准备完成。开始生成章节内容...")
        review_result = None
        
        # 获取上一章摘要
        prev_summary = ""
        if chapter_idx > 0:
            summary_file = os.path.join(self.output_dir, "summary.json")
            if os.path.exists(summary_file):
                try:
                    with open(summary_file, 'r', encoding='utf-8') as f:
                        summaries = json.load(f)
                        prev_chapter_num = str(chapter_idx)
                        if prev_chapter_num in summaries:
                            prev_summary = summaries[prev_chapter_num]
                            logging.info(f"已获取第 {chapter_idx} 章摘要用于参考")
                except Exception as e:
                    logging.error(f"读取上一章摘要失败: {str(e)}")
        
        # 获取下一章大纲
        next_outline = None
        if chapter_idx + 1 < len(self.chapter_outlines):
            next_outline = self.chapter_outlines[chapter_idx + 1]
            logging.info(f"已获取第 {chapter_idx + 2} 章大纲用于参考")
        
        # 构建上下文信息
        context_info = ""
        if prev_summary:
            context_info += f"""
            [上一章摘要]
            {prev_summary}
            """
        elif prev_content:  # 如果没有摘要，仍然使用原始内容
            context_info += f"""
            [上一章内容]
            {prev_content[:2000]}...（内容过长已省略）
            """
            
        if next_outline:
            context_info += f"""
            [下一章大纲]
            标题：{next_outline.title}
            关键剧情：{' '.join(next_outline.key_points)}
            涉及角色：{' '.join(next_outline.characters)}
            场景设定：{' '.join(next_outline.settings)}
            核心冲突：{' '.join(next_outline.conflicts)}
            """
        elif next_content:  # 如果没有大纲，仍然使用原始内容
            context_info += f"""
            [下一章内容]
            {next_content[:2000]}...（内容过长已省略）
            """
        
        if original_content:
            context_info += f"""
            [原章节内容]
            {original_content[:3000]}...（内容过长已省略）
            """
        
        # 创建提示词    
        chapter_prompt = self._create_chapter_prompt(outline, reference_materials, None)
        
        # 添加额外提示词和上下文信息
        if extra_prompt:
            chapter_prompt += f"\n\n[额外要求]\n{extra_prompt}"
            
        if context_info:
            chapter_prompt += f"\n\n[上下文信息]\n{context_info}"
            
        # 添加明确的连贯性指导
        chapter_prompt += f"""
        
        [连贯性要求]
        1. 请确保本章情节与上一章摘要中描述的情节有明确的连接
        2. 章节开头应自然承接上一章的结尾，避免跳跃感
        3. 章节结尾应为下一章大纲中的情节埋下伏笔
        4. 确保人物情感和行为的连续性，避免角色表现前后矛盾
        5. 时间线和场景转换要清晰流畅
        """
        
        try:
            chapter_content = self.content_model.generate(chapter_prompt)
            if not chapter_content or chapter_content.strip() == "":
                logging.error(f"第 {chapter_idx + 1} 章: 生成的内容为空")
                raise ValueError("生成的章节内容为空")
        except Exception as e:
            logging.error(f"第 {chapter_idx + 1} 章: 章节内容生成失败: {str(e)}")
            raise

        logging.info(f"第 {chapter_idx + 1} 章: 章节内容生成完成，字数: {self._count_chinese_chars(chapter_content)}...")
        target_length = self.config['chapter_length']
        
        try:
            chapter_content = self._adjust_content_length(chapter_content, target_length)
            logging.info(f"第 {chapter_idx + 1} 章: 字数调整完成，调整后字数: {self._count_chinese_chars(chapter_content)}")
        except Exception as e:
            logging.error(f"第 {chapter_idx + 1} 章: 字数调整失败: {str(e)}，使用原始内容继续")

        logging.info(f"第 {chapter_idx + 1} 章: 准备保存章节...")
        self._save_chapter(chapter_idx + 1, chapter_content, skip_character_update=True)

        logging.info(f"第 {chapter_idx + 1} 章内容生成完成")

        return chapter_content
    
    def generate_novel(self):
        """生成完整小说"""
        logging.info("开始生成小说")
        
        try:
            target_chapters = self.config['target_length'] // self.config['chapter_length']
            logging.info(f"目标章节数: {target_chapters}")

            # 如果大纲章节数不足，生成后续章节的大纲
            if len(self.chapter_outlines) < target_chapters:
                logging.info(f"当前大纲只有{len(self.chapter_outlines)}章，需要生成后续章节大纲以达到{target_chapters}章")
                try:
                    # 从novel_config中获取小说信息
                    novel_config = self.config.get('novel_config', {})
                    self.generate_outline(
                        novel_config.get('type', '玄幻'),
                        novel_config.get('theme', '修真逆袭'),
                        novel_config.get('style', '热血'),
                        continue_from_existing=True  # 设置为续写模式
                    )
                except Exception as e:
                    logging.error(f"生成大纲失败: {str(e)}，将使用现有大纲继续")
            
            # 记录成功和失败的章节
            success_chapters = []
            failed_chapters = []
            
            # 从当前章节开始生成
            for chapter_idx in range(self.current_chapter, len(self.chapter_outlines)):
                logging.info(f"正在生成第 {chapter_idx + 1} 章")
                
                try:
                    # 获取上一章摘要
                    prev_summary = ""
                    if chapter_idx > 0:
                        # 先检查是否已经生成了上一章
                        prev_chapter_file = os.path.join(self.output_dir, f"第{chapter_idx}章_{self.chapter_outlines[chapter_idx-1].title}.txt")
                        if os.path.exists(prev_chapter_file):
                            # 如果已经生成了上一章，获取其摘要
                            summary_file = os.path.join(self.output_dir, "summary.json")
                            if os.path.exists(summary_file):
                                with open(summary_file, 'r', encoding='utf-8') as f:
                                    summaries = json.load(f)
                                    if str(chapter_idx) in summaries:
                                        prev_summary = summaries[str(chapter_idx)]
                    
                    # 生成章节
                    chapter_content = self.generate_chapter(
                        chapter_idx,
                        prev_content=prev_summary  # 使用摘要而不是完整内容
                    )
                    
                    # 保存章节
                    self._save_chapter(chapter_idx + 1, chapter_content)
                    
                    # 更新进度
                    self.current_chapter = chapter_idx + 1
                    self._save_progress()
                    
                    logging.info(f"第 {chapter_idx + 1} 章生成完成")
                    success_chapters.append(chapter_idx + 1)
                    
                except Exception as e:
                    logging.error(f"生成第 {chapter_idx + 1} 章时出错: {str(e)}")
                    failed_chapters.append(chapter_idx + 1)
                    # 尝试保存当前进度
                    try:
                        self._save_progress()
                    except:
                        logging.error("保存进度失败")
                    
                    # 继续生成下一章，而不是中断整个过程
                    continue
                
            # 生成小说完成后的总结
            total_chapters = len(self.chapter_outlines)
            completed_chapters = len(success_chapters)
            failed_count = len(failed_chapters)
            
            completion_rate = completed_chapters / total_chapters * 100 if total_chapters > 0 else 0
            logging.info(f"小说生成完成。总章节数: {total_chapters}，成功生成: {completed_chapters}，" 
                        f"失败: {failed_count}，完成率: {completion_rate:.2f}%")
            
            if failed_chapters:
                logging.info(f"失败的章节: {failed_chapters}")
                
            return {
                "success": True,
                "total_chapters": total_chapters,
                "completed_chapters": completed_chapters,
                "failed_chapters": failed_chapters,
                "completion_rate": completion_rate
            }
            
        except Exception as e:
            logging.error(f"生成小说过程中发生严重错误: {str(e)}")
            return {
                "success": False,
                "error": str(e)
            }

    def _load_characters(self):
        """加载角色库"""
        logging.info("开始加载角色库...") # 添加日志：开始加载角色库
        if os.path.exists(self.characters_file):
            with open(self.characters_file, 'r', encoding='utf-8') as f:
                characters_data = json.load(f)
                logging.info(f"从文件中加载到角色数据: {characters_data}") # 添加日志：打印加载到的角色数据
                self.characters = {
                    name: Character(**data)
                    for name, data in characters_data.items()
                }
                # 加载旧的角色库时，如果缺少 sect 和 position 属性，则提供默认值
                for char in self.characters.values():
                    if not hasattr(char, 'sect'):
                        char.sect = "无门无派"
                    if not hasattr(char, 'position'):
                        char.position = "普通弟子"
        else:
            # 如果角色库文件不存在，则初始化为空
            self.characters = {}
            logging.info("角色库文件不存在，初始化为空角色库。") # 添加日志：角色库文件不存在

        logging.info("角色库加载完成。") # 添加日志：角色库加载完成

    def _save_characters(self):
        """保存角色库"""
        logging.info("开始保存角色库...") # 添加日志：开始保存角色库
        logging.info(f"当前角色库数据: {self.characters}") # 添加日志：打印当前角色库数据
        print(f"正在保存角色库到文件: {self.characters_file}") # 打印文件路径，**新增日志**
        characters_data = {
            name: {
                "name": char.name,
                "role": char.role,
                "personality": char.personality,
                "goals": char.goals,
                "relationships": char.relationships,
                "development_stage": char.development_stage,
                "alignment": char.alignment,
                "realm": char.realm,
                "level": char.level,
                "cultivation_method": char.cultivation_method,
                "magic_treasure": char.magic_treasure,
                "temperament": char.temperament,
                "ability": char.ability,
                "stamina": char.stamina,
                "sect": char.sect,
                "position": char.position
            }
            for name, char in self.characters.items()
        }
        logging.debug(f"即将保存的角色库 JSON 数据: {characters_data}") # 打印 JSON 数据 **新增日志**
        with open(self.characters_file, 'w', encoding='utf-8') as f:
            json.dump(characters_data, f, ensure_ascii=False, indent=2)
        logging.info("角色库保存完成。") # 添加日志：角色库保存完成 

    def _create_basic_character(self, name: str):
        """创建基本角色，当无法从模型输出解析有效数据时使用"""
        logging.info(f"为 {name} 创建基本角色")
        self.characters[name] = Character(
            name=name,
            role="配角",
            personality={"平和": 0.5},
            goals=["暂无明确目标"],
            relationships={},
            development_stage="初次登场",
            alignment="中立",
            realm="凡人",
            level=1,
            cultivation_method="无",
            magic_treasure=[],
            temperament="平和",
            ability=[],
            stamina=100,
            sect="无门无派",
            position="普通人物"
        )
        logging.info(f"成功创建基本角色 {name}") 